

import { useState } from "react"

import { supabase } from "@/lib/supabase"

// Exportable password hashing function using API route
export const hashPassword = async (plainPassword: string) => {
  try {
    const startTime = performance.now()
    const response = await fetch('/api/auth/hash-password', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ password: plainPassword }),
    })
    
    if (!response.ok) {
      throw new Error('Failed to hash password')
    }
    
    const { hashedPassword: hashed } = await response.json()
    const endTime = performance.now()
    const timeTaken = (endTime - startTime).toFixed(2)
    
    console.log(`Hash generated in ${timeTaken}ms with 13 salt rounds`)
    return { hashed, timeTaken }
  } catch (error) {
    console.error('Error hashing password:', error)
    throw error
  }
}

export default function TestingPage() {
  const [password, setPassword] = useState("")
  const [hashedPassword, setHashedPassword] = useState("")
  const [verifyPassword, setVerifyPassword] = useState("")
  const [verificationResult, setVerificationResult] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [saltRounds, setSaltRounds] = useState(12)
  const [hashInfo, setHashInfo] = useState("")
  const [supabaseKey, setSupabaseKey] = useState("")

  // Test password hashing
  const handleHashPassword = async () => {
    if (!password) return
    setIsLoading(true)
    try {
      const result = await hashPassword(password)
      setHashedPassword(result.hashed)
      setHashInfo(`Hash generated in ${result.timeTaken}ms with 13 salt rounds`)
    } catch (error) {
      console.error('Hashing failed:', error)
      setHashInfo("❌ Hashing failed")
    } finally {
      setIsLoading(false)
    }
  }

  // Test password verification
  const handleVerifyPassword = async () => {
    if (!verifyPassword || !hashedPassword) return
    setIsLoading(true)
    try {
      const startTime = performance.now()
      const response = await fetch('/api/auth/compare-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          password: verifyPassword, 
          hashedPassword: hashedPassword 
        }),
      })
      
      if (!response.ok) {
        throw new Error('Failed to verify password')
      }
      
      const { isMatch } = await response.json()
      const endTime = performance.now()
      const timeTaken = (endTime - startTime).toFixed(2)
      
      setVerificationResult(
        isMatch 
          ? `✅ Passwords match! Verification took ${timeTaken}ms` 
          : `❌ Passwords don't match! Verification took ${timeTaken}ms`
      )
    } catch (error) {
      setVerificationResult("❌ Verification failed")
      console.error('Verification failed:', error)
    } finally {
      setIsLoading(false)
    }
  }

  // Generate a random password for testing
  const generateRandomPassword = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*'
    let result = ''
    for (let i = 0; i < 16; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length))
    }
    setPassword(result)
  }

  // Test Supabase connection
  const testSupabase = async () => {
    try {
      const { data, error } = await supabase.from("alarms").select("*")
      if (error) {
        console.error('Supabase error:', error)
        alert(`Supabase error: ${error.message}`)
      } else {
        console.log('Supabase data:', data)
        alert(`Supabase connection successful! Found ${data?.length || 0} alarms`)
      }
    } catch (error) {
      console.error('Supabase test failed:', error)
      alert('Supabase test failed')
    }
  }

  // Test with Supabase key
  const testWithSupabaseKey = async () => {
    if (!supabaseKey) return
    try {
      // You can use this key for direct API calls or testing
      console.log('Using Supabase key:', supabaseKey.substring(0, 20) + '...')
      alert('Supabase key captured! Check console for details.')
    } catch (error) {
      console.error('Supabase key test failed:', error)
      alert('Supabase key test failed')
    }
  }

  return (
    <div className="p-8 max-w-2xl mx-auto">
      <h1 className="text-3xl font-bold mb-8">Password Hashing Testing with bcryptjs</h1>
      
      {/* Salt vs Rounds Explanation */}
      <div className="mb-8 p-6 border rounded-lg bg-green-50">
        <h2 className="text-xl font-semibold mb-4">🔑 Salt vs Salt Rounds Explained</h2>
        <div className="space-y-3 text-sm">
          <div>
            <strong>Salt:</strong> A random string automatically generated by bcryptjs for each password. 
            Even identical passwords get different hashes due to different salts.
          </div>
          <div>
            <strong>Salt Rounds:</strong> The number of times the hashing algorithm runs. 
            More rounds = more secure but slower to compute.
          </div>
          <div className="bg-white p-3 rounded border">
            <strong>Example:</strong> "password123" with 12 rounds will generate different hashes each time 
            because bcryptjs creates a new random salt for each hash.
          </div>
        </div>
      </div>

      {/* Salt Rounds Configuration */}
      <div className="mb-8 p-6 border rounded-lg bg-blue-50">
        <h2 className="text-xl font-semibold mb-4">Salt Rounds Configuration</h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">
              Salt Rounds: {saltRounds} 
              <span className="text-xs text-gray-500 ml-2">
                (Higher = more secure but slower)
              </span>
            </label>
            <input
              type="range"
              min="8"
              max="16"
              value={saltRounds}
              onChange={(e) => setSaltRounds(parseInt(e.target.value))}
              className="w-full"
            />
            <div className="flex justify-between text-xs text-gray-500">
              <span>8 (Fast)</span>
              <span>12 (Balanced)</span>
              <span>16 (Secure)</span>
            </div>
          </div>
        </div>
      </div>

      {/* Password Hashing Section */}
      <div className="mb-8 p-6 border rounded-lg bg-gray-50">
        <h2 className="text-xl font-semibold mb-4">Password Hashing</h2>
        <div className="space-y-4">
          <div className="flex gap-2">
            <div className="flex-1">
              <label className="block text-sm font-medium mb-2">Enter Password:</label>
              <input
                type="text"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="Enter a password to hash"
              />
            </div>
            <button
              onClick={generateRandomPassword}
              className="px-3 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 text-sm"
            >
              Generate
            </button>
          </div>
          <button
            onClick={handleHashPassword}
            disabled={isLoading || !password}
            className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50"
          >
            {isLoading ? "Hashing..." : "Hash Password"}
          </button>
          {hashInfo && (
            <div className="p-2 bg-blue-100 rounded text-sm text-blue-800">
              {hashInfo}
            </div>
          )}
          {hashedPassword && (
            <div>
              <label className="block text-sm font-medium mb-2">Hashed Password:</label>
              <input
                type="text"
                value={hashedPassword}
                readOnly
                className="w-full p-2 border rounded-md bg-gray-100 font-mono text-xs"
              />
              <div className="text-xs text-gray-500 mt-1">
                Length: {hashedPassword.length} characters
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Password Verification Section */}
      <div className="mb-8 p-6 border rounded-lg bg-gray-50">
        <h2 className="text-xl font-semibold mb-4">Password Verification</h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Verify Password:</label>
            <input
              type="text"
              value={verifyPassword}
              onChange={(e) => setVerifyPassword(e.target.value)}
              className="w-full p-2 border rounded-md"
              placeholder="Enter password to verify"
            />
          </div>
          <button
            onClick={handleVerifyPassword}
            disabled={isLoading || !verifyPassword || !hashedPassword}
            className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:opacity-50"
          >
            {isLoading ? "Verifying..." : "Verify Password"}
          </button>
          {verificationResult && (
            <div className="p-3 rounded-md bg-white border">
              <span className="font-medium">{verificationResult}</span>
            </div>
          )}
        </div>
      </div>

      {/* Supabase Key Testing */}
      <div className="mb-8 p-6 border rounded-lg bg-purple-50">
        <h2 className="text-xl font-semibold mb-4">Supabase Key Testing</h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Enter Supabase Key:</label>
            <input
              type="password"
              value={supabaseKey}
              onChange={(e) => setSupabaseKey(e.target.value)}
              className="w-full p-2 border rounded-md"
              placeholder="Paste your NEXT_PUBLIC_SUPABASE_KEY here"
            />
          </div>
          <button
            onClick={testWithSupabaseKey}
            disabled={!supabaseKey}
            className="px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 disabled:opacity-50"
          >
            Test Supabase Key
          </button>
        </div>
      </div>

      {/* Supabase Test Section */}
      <div className="mb-8 p-6 border rounded-lg bg-gray-50">
        <h2 className="text-xl font-semibold mb-4">Supabase Connection Test</h2>
        <button
          onClick={testSupabase}
          className="px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600"
        >
          Test Supabase Connection
        </button>
      </div>

      {/* Notes Section */}
      <div className="p-6 border rounded-lg bg-yellow-50">
        <h2 className="text-xl font-semibold mb-4">bcryptjs Benefits</h2>
        <ul className="list-disc list-inside space-y-2 text-sm">
          <li><strong>Salt Generation:</strong> Automatically generates unique salts for each password</li>
          <li><strong>Configurable Security:</strong> Adjustable salt rounds (8-16 recommended)</li>
          <li><strong>Time-based Security:</strong> Higher rounds = slower hashing = harder to brute force</li>
          <li><strong>Industry Standard:</strong> Widely used and trusted for password hashing</li>
          <li><strong>Built-in Comparison:</strong> Safe comparison function prevents timing attacks</li>
        </ul>
      </div>
    </div>
  )
}